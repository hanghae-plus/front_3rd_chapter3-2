import { Event, RepeatInfo } from '../../types';
import {
  generateRepeatedEvents,
  getFilteredEvents,
  hasChangeInRepeatInfo,
} from '../../utils/eventUtils';

describe('getFilteredEvents', () => {
  const events: Event[] = [
    {
      id: '1',
      title: 'Ïù¥Î≤§Ìä∏ 1',
      date: '2024-07-01',
      startTime: '10:00',
      endTime: '11:00',
      description: '',
      location: '',
      category: '',
      repeat: { type: 'none', interval: 0 },
      notificationTime: 0,
    },
    {
      id: '2',
      title: 'Ïù¥Î≤§Ìä∏ 2',
      date: '2024-07-05',
      startTime: '14:00',
      endTime: '15:00',
      description: '',
      location: '',
      category: '',
      repeat: { type: 'none', interval: 0 },
      notificationTime: 0,
    },
    {
      id: '3',
      title: 'Ïù¥Î≤§Ìä∏ 3',
      date: '2024-07-10',
      startTime: '09:00',
      endTime: '10:00',
      description: '',
      location: '',
      category: '',
      repeat: { type: 'none', interval: 0 },
      notificationTime: 0,
    },
  ];

  it("Í≤ÄÏÉâÏñ¥ 'Ïù¥Î≤§Ìä∏ 2'Ïóê ÎßûÎäî Ïù¥Î≤§Ìä∏Îßå Î∞òÌôòÌïúÎã§", () => {
    const result = getFilteredEvents(events, 'Ïù¥Î≤§Ìä∏ 2', new Date('2024-07-01'), 'month');
    expect(result).toHaveLength(1);
    expect(result[0].title).toBe('Ïù¥Î≤§Ìä∏ 2');
  });

  it('Ï£ºÍ∞Ñ Î∑∞ÏóêÏÑú 2024-07-01 Ï£ºÏùò Ïù¥Î≤§Ìä∏Îßå Î∞òÌôòÌïúÎã§', () => {
    const result = getFilteredEvents(events, '', new Date('2024-07-01'), 'week');
    expect(result).toHaveLength(2);
    expect(result.map((e) => e.title)).toEqual(['Ïù¥Î≤§Ìä∏ 1', 'Ïù¥Î≤§Ìä∏ 2']);
  });

  it('ÏõîÍ∞Ñ Î∑∞ÏóêÏÑú 2024ÎÖÑ 7ÏõîÏùò Î™®Îì† Ïù¥Î≤§Ìä∏Î•º Î∞òÌôòÌïúÎã§', () => {
    const result = getFilteredEvents(events, '', new Date('2024-07-01'), 'month');
    expect(result).toHaveLength(3);
    expect(result.map((e) => e.title)).toEqual(['Ïù¥Î≤§Ìä∏ 1', 'Ïù¥Î≤§Ìä∏ 2', 'Ïù¥Î≤§Ìä∏ 3']);
  });

  it("Í≤ÄÏÉâÏñ¥ 'Ïù¥Î≤§Ìä∏'ÏôÄ Ï£ºÍ∞Ñ Î∑∞ ÌïÑÌÑ∞ÎßÅÏùÑ ÎèôÏãúÏóê Ï†ÅÏö©ÌïúÎã§", () => {
    const result = getFilteredEvents(events, 'Ïù¥Î≤§Ìä∏', new Date('2024-07-01'), 'week');
    expect(result).toHaveLength(2);
    expect(result.map((e) => e.title)).toEqual(['Ïù¥Î≤§Ìä∏ 1', 'Ïù¥Î≤§Ìä∏ 2']);
  });

  it('Í≤ÄÏÉâÏñ¥Í∞Ä ÏóÜÏùÑ Îïå Î™®Îì† Ïù¥Î≤§Ìä∏Î•º Î∞òÌôòÌïúÎã§', () => {
    const result = getFilteredEvents(events, '', new Date('2024-07-01'), 'month');
    expect(result).toHaveLength(3);
  });

  it('Í≤ÄÏÉâÏñ¥Í∞Ä ÎåÄÏÜåÎ¨∏ÏûêÎ•º Íµ¨Î∂ÑÌïòÏßÄ ÏïäÍ≥† ÏûëÎèôÌïúÎã§', () => {
    const result = getFilteredEvents(events, 'Ïù¥Î≤§Ìä∏ 2', new Date('2024-07-01'), 'month');
    expect(result).toHaveLength(1);
    expect(result[0].title).toBe('Ïù¥Î≤§Ìä∏ 2');
  });

  it('ÏõîÏùò Í≤ΩÍ≥ÑÏóê ÏûàÎäî Ïù¥Î≤§Ìä∏Î•º Ïò¨Î∞îÎ•¥Í≤å ÌïÑÌÑ∞ÎßÅÌïúÎã§', () => {
    const borderEvents: Event[] = [
      {
        id: '4',
        title: '6Ïõî ÎßàÏßÄÎßâ ÎÇ† Ïù¥Î≤§Ìä∏',
        date: '2024-06-30',
        startTime: '23:00',
        endTime: '23:59',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'none', interval: 0 },
        notificationTime: 0,
      },
      ...events,
      {
        id: '5',
        title: '8Ïõî Ï≤´ ÎÇ† Ïù¥Î≤§Ìä∏',
        date: '2024-08-01',
        startTime: '00:00',
        endTime: '01:00',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'none', interval: 0 },
        notificationTime: 0,
      },
    ];
    const result = getFilteredEvents(borderEvents, '', new Date('2024-07-01'), 'month');
    expect(result).toHaveLength(3);
    expect(result.map((e) => e.title)).toEqual(['Ïù¥Î≤§Ìä∏ 1', 'Ïù¥Î≤§Ìä∏ 2', 'Ïù¥Î≤§Ìä∏ 3']);
  });

  it('Îπà Ïù¥Î≤§Ìä∏ Î¶¨Ïä§Ìä∏Ïóê ÎåÄÌï¥ Îπà Î∞∞Ïó¥ÏùÑ Î∞òÌôòÌïúÎã§', () => {
    const result = getFilteredEvents([], '', new Date('2024-07-01'), 'month');
    expect(result).toHaveLength(0);
  });
});

describe('generateRepeatedEvents', () => {
  describe('Ï¥àÍ∏∞ ÏÑ§Ï†ï', () => {
    it('üî¥ Ïù¥Î≤§Ìä∏Ïùò repeat typeÏù¥ "none" Ïùº Ïãú Îπà Î∞∞Ïó¥ÏùÑ Î∞òÌôòÌïúÎã§.', () => {
      const testEvent: Event = {
        id: '1',
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2024-07-01',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'none', interval: 0 },
        notificationTime: 0,
      };
      const result = generateRepeatedEvents(testEvent);
      expect(result).toHaveLength(0);
    });
    it('üî¥ Ïù¥Î≤§Ìä∏Ïùò repeat interval 0 Ïùº Ïãú Îπà Î∞∞Ïó¥ÏùÑ Î∞òÌôòÌïúÎã§.', () => {
      const testEvent: Event = {
        id: '1',
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2024-07-01',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'daily', interval: 0 },
        notificationTime: 0,
      };
      const result = generateRepeatedEvents(testEvent);
      expect(result).toHaveLength(0);
    });
    it('üî¥ Ïù¥Î≤§Ìä∏Ïùò repeat interval ÏùåÏàòÏùº Ïãú Îπà Î∞∞Ïó¥ÏùÑ Î∞òÌôòÌïúÎã§.', () => {
      const testEvent: Event = {
        id: '1',
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2024-07-01',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'daily', interval: -1 },
        notificationTime: 0,
      };
      const result = generateRepeatedEvents(testEvent);
      expect(result).toHaveLength(0);
    });
  });
  describe('daily', () => {
    it('üü¢ type Ïù¥ "daily" Ïù¥Í≥† Í∞ÑÍ≤©Ïù¥ 1Ïùº Í≤ΩÏö∞ Ï¢ÖÎ£åÏùºÍπåÏßÄ Îß§Ïùº ÎèôÏùºÌïú Ïù¥Î≤§Ìä∏Î•º Í∞ÄÏßÑ Î∞∞Ïó¥ÏùÑ Î∞òÌôòÌïúÎã§.', () => {
      const testEvent: Event = {
        id: '1',
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2024-07-01',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'daily', interval: 1, endDate: '2024-12-31' },
        notificationTime: 0,
      };
      const result = generateRepeatedEvents(testEvent);
      expect(result).toHaveLength(183);
      expect(result.at(0)).toEqual({
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2024-07-02',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'daily', interval: 1, endDate: '2024-12-31' },
        notificationTime: 0,
      });
      expect(result.at(-1)).toEqual({
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2024-12-31',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'daily', interval: 1, endDate: '2024-12-31' },
        notificationTime: 0,
      });
    });
    it('üü¢ type Ïù¥ "daily" Ïù¥Í≥† Í∞ÑÍ≤©Ïù¥ 5Ïùº Í≤ΩÏö∞ Ï¢ÖÎ£åÏùºÍπåÏßÄ Îß§Ïùº ÎèôÏùºÌïú Ïù¥Î≤§Ìä∏Î•º Í∞ÄÏßÑ Î∞∞Ïó¥ÏùÑ Î∞òÌôòÌïúÎã§.', () => {
      const testEvent: Event = {
        id: '1',
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2024-07-01',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'daily', interval: 5, endDate: '2024-12-31' },
        notificationTime: 0,
      };
      const result = generateRepeatedEvents(testEvent);
      expect(result).toHaveLength(36);
      expect(result.at(0)).toEqual({
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2024-07-06',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'daily', interval: 5, endDate: '2024-12-31' },
        notificationTime: 0,
      });
      expect(result.at(-1)).toEqual({
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2024-12-28',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'daily', interval: 5, endDate: '2024-12-31' },
        notificationTime: 0,
      });
    });
  });
  describe('weekly', () => {
    it('üü¢ Í∞ÑÍ≤©Ïù¥ 1Ïùº Í≤ΩÏö∞ Ï¢ÖÎ£åÏùºÍπåÏßÄ Îß§Ï£º ÎèôÏùºÌïú Ïù¥Î≤§Ìä∏Î•º Í∞ÄÏßÑ Î∞∞Ïó¥ÏùÑ Î∞òÌôòÌïúÎã§.', () => {
      const testEvent: Event = {
        id: '1',
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2024-07-01',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'weekly', interval: 1, endDate: '2024-12-31' },
        notificationTime: 0,
      };
      const result = generateRepeatedEvents(testEvent);
      expect(result).toHaveLength(26);
      expect(result.at(0)).toEqual({
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2024-07-08',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'weekly', interval: 1, endDate: '2024-12-31' },
        notificationTime: 0,
      });
      expect(result.at(-1)).toEqual({
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2024-12-30',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'weekly', interval: 1, endDate: '2024-12-31' },
        notificationTime: 0,
      });
    });
    it('üü¢ Í∞ÑÍ≤©Ïù¥ 2Ïùº Í≤ΩÏö∞ Ï¢ÖÎ£åÏùºÍπåÏßÄ 2Ï£ºÎßàÎã§ ÎèôÏùºÌïú Ïù¥Î≤§Ìä∏Î•º Í∞ÄÏßÑ Î∞∞Ïó¥ÏùÑ Î∞òÌôòÌïúÎã§.', () => {
      const testEvent: Event = {
        id: '1',
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2024-07-01',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'weekly', interval: 2, endDate: '2024-12-31' },
        notificationTime: 0,
      };
      const result = generateRepeatedEvents(testEvent);
      expect(result).toHaveLength(13);
      expect(result.at(0)).toEqual({
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2024-07-15',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'weekly', interval: 2, endDate: '2024-12-31' },
        notificationTime: 0,
      });
      expect(result.at(-1)).toEqual({
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2024-12-30',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'weekly', interval: 2, endDate: '2024-12-31' },
        notificationTime: 0,
      });
    });
    it('üü¢ Í∞ÑÍ≤©Ïù¥ 2Ïù¥Í≥† ÏàòÏöîÏùº ÏßÄÏ†ïÏùº Í≤ΩÏö∞ Ï¢ÖÎ£åÏùºÍπåÏßÄ 2Ï£ºÎßàÎã§ ÏàòÏöîÏùºÏî© ÎèôÏùºÌïú Ïù¥Î≤§Ìä∏Î•º Í∞ÄÏßÑ Î∞∞Ïó¥ÏùÑ Î∞òÌôòÌïúÎã§.', () => {
      const testEvent: Event = {
        id: '1',
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2024-07-01',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'weekly', interval: 2, endDate: '2024-12-31', weekType: 'wed' },
        notificationTime: 0,
      };
      const result = generateRepeatedEvents(testEvent);
      expect(result).toHaveLength(13);
      expect(result.at(0)).toEqual({
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2024-07-03',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'weekly', interval: 2, endDate: '2024-12-31', weekType: 'wed' },
        notificationTime: 0,
      });
      expect(result.at(-1)).toEqual({
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2024-12-18',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'weekly', interval: 2, endDate: '2024-12-31', weekType: 'wed' },
        notificationTime: 0,
      });
    });
  });
  describe('monthly', () => {
    it('üü¢ Í∞ÑÍ≤©Ïù¥ 1Ïùº Í≤ΩÏö∞ Ï¢ÖÎ£åÏùºÍπåÏßÄ Îß§Ïõî ÎèôÏùºÌïú Ïù¥Î≤§Ìä∏Î•º Í∞ÄÏßÑ Î∞∞Ïó¥ÏùÑ Î∞òÌôòÌïúÎã§.', () => {
      const testEvent: Event = {
        id: '1',
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2024-07-01',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'monthly', interval: 1, endDate: '2024-12-31' },
        notificationTime: 0,
      };
      const result = generateRepeatedEvents(testEvent);
      expect(result).toHaveLength(5);
      expect(result.at(0)).toEqual({
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2024-08-01',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'monthly', interval: 1, endDate: '2024-12-31' },
        notificationTime: 0,
      });
      expect(result.at(-1)).toEqual({
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2024-12-01',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'monthly', interval: 1, endDate: '2024-12-31' },
        notificationTime: 0,
      });
    });
    it('üü¢ Í∞ÑÍ≤©Ïù¥ 2Ïùº Í≤ΩÏö∞ Ï¢ÖÎ£åÏùºÍπåÏßÄ 2Í∞úÏõîÎßàÎã§ ÎèôÏùºÌïú Ïù¥Î≤§Ìä∏Î•º Í∞ÄÏßÑ Î∞∞Ïó¥ÏùÑ Î∞òÌôòÌïúÎã§.', () => {
      const testEvent: Event = {
        id: '1',
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2024-07-01',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'monthly', interval: 2, endDate: '2024-12-31' },
        notificationTime: 0,
      };
      const result = generateRepeatedEvents(testEvent);
      expect(result).toHaveLength(2);
      expect(result.at(0)).toEqual({
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2024-09-01',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'monthly', interval: 2, endDate: '2024-12-31' },
        notificationTime: 0,
      });
      expect(result.at(-1)).toEqual({
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2024-11-01',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'monthly', interval: 2, endDate: '2024-12-31' },
        notificationTime: 0,
      });
    });
    it('üü¢ Í∞ÑÍ≤©Ïù¥ 1Ïù¥Í≥† 3Ï£ºÏ∞® ÏàòÏöîÏùºÏùº Í≤ΩÏö∞ Ï¢ÖÎ£åÏùºÍπåÏßÄ Îß§Ïõî 3Ï£ºÏ∞® ÏàòÏöîÏùºÏóê ÎèôÏùºÌïú Ïù¥Î≤§Ìä∏Î•º Í∞ÄÏßÑ Î∞∞Ïó¥ÏùÑ Î∞òÌôòÌïúÎã§.', () => {
      const testEvent: Event = {
        id: '1',
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2024-07-01',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: {
          type: 'monthly',
          interval: 1,
          endDate: '2024-12-31',
          weekType: 'wed',
          weekOrder: 3,
        },
        notificationTime: 0,
      };
      const result = generateRepeatedEvents(testEvent);
      expect(result).toHaveLength(6);
      expect(result.at(0)).toEqual({
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2024-07-17',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: {
          type: 'monthly',
          interval: 1,
          endDate: '2024-12-31',
          weekType: 'wed',
          weekOrder: 3,
        },
        notificationTime: 0,
      });
      expect(result.at(-1)).toEqual({
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2024-12-18',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: {
          type: 'monthly',
          interval: 1,
          endDate: '2024-12-31',
          weekType: 'wed',
          weekOrder: 3,
        },
        notificationTime: 0,
      });
    });
    it('üü¢ Í∞ÑÍ≤©Ïù¥ 2Ïù¥Í≥† 3Ï£ºÏ∞® ÏàòÏöîÏùºÏùº Í≤ΩÏö∞ Ï¢ÖÎ£åÏùºÍπåÏßÄ 2Îã¨ÎßàÎã§ 3Ï£ºÏ∞® ÏàòÏöîÏùºÏóê ÎèôÏùºÌïú Ïù¥Î≤§Ìä∏Î•º Í∞ÄÏßÑ Î∞∞Ïó¥ÏùÑ Î∞òÌôòÌïúÎã§.', () => {
      const testEvent: Event = {
        id: '1',
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2024-07-01',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: {
          type: 'monthly',
          interval: 2,
          endDate: '2024-12-31',
          weekType: 'wed',
          weekOrder: 3,
        },
        notificationTime: 0,
      };
      const result = generateRepeatedEvents(testEvent);
      expect(result).toHaveLength(3);
      expect(result.at(0)).toEqual({
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2024-07-17',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: {
          type: 'monthly',
          interval: 2,
          endDate: '2024-12-31',
          weekType: 'wed',
          weekOrder: 3,
        },
        notificationTime: 0,
      });
      expect(result.at(-1)).toEqual({
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2024-11-20',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: {
          type: 'monthly',
          interval: 2,
          endDate: '2024-12-31',
          weekType: 'wed',
          weekOrder: 3,
        },
        notificationTime: 0,
      });
    });
  });
  describe('yearly', () => {
    it('üü¢ Í∞ÑÍ≤©Ïù¥ 1Ïùº Í≤ΩÏö∞ Ï¢ÖÎ£åÏùºÍπåÏßÄ Îß§ÎÖÑ ÎèôÏùºÌïú Ïù¥Î≤§Ìä∏Î•º Í∞ÄÏßÑ Î∞∞Ïó¥ÏùÑ Î∞òÌôòÌïúÎã§.', () => {
      const testEvent: Event = {
        id: '1',
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2024-07-01',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'yearly', interval: 1, endDate: '2030-12-31' },
        notificationTime: 0,
      };
      const result = generateRepeatedEvents(testEvent);
      expect(result).toHaveLength(6);
      expect(result.at(0)).toEqual({
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2025-07-01',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'yearly', interval: 1, endDate: '2030-12-31' },
        notificationTime: 0,
      });
      expect(result.at(-1)).toEqual({
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2030-07-01',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'yearly', interval: 1, endDate: '2030-12-31' },
        notificationTime: 0,
      });
    });
    it('üü¢ Í∞ÑÍ≤©Ïù¥ 1Ïù¥Í≥† 11Ïõî 30Ïùº ÏßÄÏ†ïÏùº Í≤ΩÏö∞ Ï¢ÖÎ£åÏùºÍπåÏßÄ Îß§ÎÖÑ ÎèôÏùºÌïú Ïù¥Î≤§Ìä∏Î•º Í∞ÄÏßÑ Î∞∞Ïó¥ÏùÑ Î∞òÌôòÌïúÎã§.', () => {
      const testEvent: Event = {
        id: '1',
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2024-07-01',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'yearly', interval: 1, endDate: '2030-12-31', monthType: 'nov', day: 30 },
        notificationTime: 0,
      };
      const result = generateRepeatedEvents(testEvent);
      expect(result).toHaveLength(7);
      expect(result.at(0)).toEqual({
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2024-11-30',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'yearly', interval: 1, endDate: '2030-12-31', monthType: 'nov', day: 30 },
        notificationTime: 0,
      });
      expect(result.at(-1)).toEqual({
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2030-11-30',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'yearly', interval: 1, endDate: '2030-12-31', monthType: 'nov', day: 30 },
        notificationTime: 0,
      });
    });
    it('üü¢ Í∞ÑÍ≤©Ïù¥ 2Ïù¥Í≥† 11Ïõî 30Ïùº ÏßÄÏ†ïÏùº Í≤ΩÏö∞ Ï¢ÖÎ£åÏùºÍπåÏßÄ 2ÎÖÑÎßàÎã§ ÎèôÏùºÌïú Ïù¥Î≤§Ìä∏Î•º Í∞ÄÏßÑ Î∞∞Ïó¥ÏùÑ Î∞òÌôòÌïúÎã§.', () => {
      const testEvent: Event = {
        id: '1',
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2024-07-01',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'yearly', interval: 2, endDate: '2030-12-31', monthType: 'nov', day: 30 },
        notificationTime: 0,
      };
      const result = generateRepeatedEvents(testEvent);
      expect(result).toHaveLength(4);
      expect(result.at(0)).toEqual({
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2024-11-30',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'yearly', interval: 2, endDate: '2030-12-31', monthType: 'nov', day: 30 },
        notificationTime: 0,
      });
      expect(result.at(-1)).toEqual({
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2030-11-30',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'yearly', interval: 2, endDate: '2030-12-31', monthType: 'nov', day: 30 },
        notificationTime: 0,
      });
    });
    it('üü¢ Í∞ÑÍ≤©Ïù¥ 1Ïù¥Í≥† 2Ïõî 29Ïùº ÏßÄÏ†ïÏùº Í≤ΩÏö∞ Ï¢ÖÎ£åÏùºÍπåÏßÄ Îß§ÎÖÑ ÎèôÏùºÌïú Ïù¥Î≤§Ìä∏Î•º Í∞ÄÏßÑ Î∞∞Ïó¥ÏùÑ Î∞òÌôòÌïúÎã§.', () => {
      const testEvent: Event = {
        id: '1',
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2024-07-01',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'yearly', interval: 1, endDate: '2030-12-31', monthType: 'feb', day: 29 },
        notificationTime: 0,
      };
      const result = generateRepeatedEvents(testEvent);
      expect(result).toHaveLength(6);
      expect(result.at(0)).toEqual({
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2025-02-28',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'yearly', interval: 1, endDate: '2030-12-31', monthType: 'feb', day: 29 },
        notificationTime: 0,
      });
      expect(result.at(-3)).toEqual({
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2028-02-29',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'yearly', interval: 1, endDate: '2030-12-31', monthType: 'feb', day: 29 },
        notificationTime: 0,
      });
      expect(result.at(-1)).toEqual({
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2030-02-28',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'yearly', interval: 1, endDate: '2030-12-31', monthType: 'feb', day: 29 },
        notificationTime: 0,
      });
    });
    it('üü¢ Í∞ÑÍ≤©Ïù¥ 2Ïùº Í≤ΩÏö∞ Ï¢ÖÎ£åÏùºÍπåÏßÄ 2ÎÖÑÎßàÎã§ ÎèôÏùºÌïú Ïù¥Î≤§Ìä∏Î•º Í∞ÄÏßÑ Î∞∞Ïó¥ÏùÑ Î∞òÌôòÌïúÎã§.', () => {
      const testEvent: Event = {
        id: '1',
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2024-07-01',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'yearly', interval: 2, endDate: '2030-12-31' },
        notificationTime: 0,
      };
      const result = generateRepeatedEvents(testEvent);
      expect(result).toHaveLength(3);
      expect(result.at(0)).toEqual({
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2026-07-01',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'yearly', interval: 2, endDate: '2030-12-31' },
        notificationTime: 0,
      });
      expect(result.at(-1)).toEqual({
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2030-07-01',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: { type: 'yearly', interval: 2, endDate: '2030-12-31' },
        notificationTime: 0,
      });
    });
    it('üü¢ Í∞ÑÍ≤©Ïù¥ 1Ïù¥Í≥† 7Ïõî 1Ï£ºÏ∞® Î™©ÏöîÏùº ÏßÄÏ†ïÏùº Í≤ΩÏö∞ Ï¢ÖÎ£åÏùºÍπåÏßÄ Îß§ÎÖÑ ÎèôÏùºÌïú Ïù¥Î≤§Ìä∏Î•º Í∞ÄÏßÑ Î∞∞Ïó¥ÏùÑ Î∞òÌôòÌïúÎã§.', () => {
      const testEvent: Event = {
        id: '1',
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2024-07-01',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: {
          type: 'yearly',
          interval: 1,
          endDate: '2030-12-31',
          monthType: 'jul',
          weekOrder: 1,
          weekType: 'thu',
        },
        notificationTime: 0,
      };
      const result = generateRepeatedEvents(testEvent);
      expect(result).toHaveLength(7);
      expect(result.at(0)).toEqual({
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2024-07-04',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: {
          type: 'yearly',
          interval: 1,
          endDate: '2030-12-31',
          monthType: 'jul',
          weekOrder: 1,
          weekType: 'thu',
        },
        notificationTime: 0,
      });
      expect(result.at(-1)).toEqual({
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2030-07-04',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: {
          type: 'yearly',
          interval: 1,
          endDate: '2030-12-31',
          monthType: 'jul',
          weekOrder: 1,
          weekType: 'thu',
        },
        notificationTime: 0,
      });
    });
    it('üü¢ Í∞ÑÍ≤©Ïù¥ 2Ïù¥Í≥† 10Ïõî 3Ï£ºÏ∞® ÌÜ†ÏöîÏùº ÏßÄÏ†ïÏùº Í≤ΩÏö∞ Ï¢ÖÎ£åÏùºÍπåÏßÄ 2ÎÖÑÎßàÎã§ ÎèôÏùºÌïú Ïù¥Î≤§Ìä∏Î•º Í∞ÄÏßÑ Î∞∞Ïó¥ÏùÑ Î∞òÌôòÌïúÎã§.', () => {
      const testEvent: Event = {
        id: '1',
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2024-07-01',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: {
          type: 'yearly',
          interval: 2,
          endDate: '2030-12-31',
          monthType: 'oct',
          weekOrder: 3,
          weekType: 'sat',
        },
        notificationTime: 0,
      };
      const result = generateRepeatedEvents(testEvent);
      expect(result).toHaveLength(4);
      expect(result.at(0)).toEqual({
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2024-10-19',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: {
          type: 'yearly',
          interval: 2,
          endDate: '2030-12-31',
          monthType: 'oct',
          weekOrder: 3,
          weekType: 'sat',
        },
        notificationTime: 0,
      });
      expect(result.at(-1)).toEqual({
        title: 'Ïù¥Î≤§Ìä∏ 1',
        date: '2030-10-19',
        startTime: '10:00',
        endTime: '11:00',
        description: '',
        location: '',
        category: '',
        repeat: {
          type: 'yearly',
          interval: 2,
          endDate: '2030-12-31',
          monthType: 'oct',
          weekOrder: 3,
          weekType: 'sat',
        },
        notificationTime: 0,
      });
    });
  });
});

describe('hasChangeInRepeatInfo', () => {
  it('üü¢ ÎπÑÍµêÌïòÎ†§Îäî Îëê Î∞òÎ≥µ ÏùºÏ†ï Ï†ïÎ≥¥Ïùò keyÍ∞Ä Í∞ôÍ≥† valueÎèÑ Í∞ôÎã§Î©¥ false Î∞òÌôòÌïúÎã§.', () => {
    const repeatInfo1: RepeatInfo = {
      type: 'monthly',
      interval: 1,
      endDate: '2024-12-31',
      weekType: 'wed',
      weekOrder: 3,
    };
    const repeatInfo2: RepeatInfo = {
      type: 'monthly',
      interval: 1,
      endDate: '2024-12-31',
      weekType: 'wed',
      weekOrder: 3,
    };
    const result = hasChangeInRepeatInfo(repeatInfo1, repeatInfo2);
    expect(result).toBe(false);
  });
  it('üü¢ ÎπÑÍµêÌïòÎ†§Îäî Îëê Î∞òÎ≥µ ÏùºÏ†ï Ï†ïÎ≥¥Ïùò keyÍ∞Ä Í∞ôÍ≥† valueÎäî Îã§Î•¥Îã§Î©¥ false Î∞òÌôòÌïúÎã§.', () => {
    const repeatInfo1: RepeatInfo = {
      type: 'monthly',
      interval: 1,
      endDate: '2024-12-31',
      weekType: 'wed',
      weekOrder: 3,
    };
    const repeatInfo2: RepeatInfo = {
      type: 'monthly',
      interval: 1,
      endDate: '2025-12-31',
      weekType: 'wed',
      weekOrder: 3,
    };
    const result = hasChangeInRepeatInfo(repeatInfo1, repeatInfo2);
    expect(result).toBe(true);
  });
  it('üü¢ ÎπÑÍµêÌïòÎ†§Îäî Îëê Î∞òÎ≥µ ÏùºÏ†ï Ï†ïÎ≥¥Ïùò keyÍ∞Ä Îã§Î•¥Îã§Î©¥ true Î∞òÌôòÌïúÎã§.', () => {
    const repeatInfo1: RepeatInfo = {
      type: 'monthly',
      interval: 1,
      endDate: '2024-12-31',
      weekType: 'wed',
      weekOrder: 3,
    };
    const repeatInfo2: RepeatInfo = {
      type: 'monthly',
      interval: 1,
      endDate: '2024-12-31',
      weekType: 'wed',
      weekOrder: 3,
      day: 11,
    };
    const result = hasChangeInRepeatInfo(repeatInfo1, repeatInfo2);
    expect(result).toBe(true);
  });
});
